{"version":3,"sources":["components/SimpleCSVLoader.jsx","components/ScatterPlotComponent.jsx","App.js","index.js"],"names":["SimpleCSVLoader","data","setData","useState","headers","setHeaders","error","setError","React","createElement","className","type","accept","onChange","event","file","target","files","Papa","parse","complete","results","length","meta","fields","Object","keys","header","skipEmptyLines","concat","message","style","overflowX","map","index","key","slice","row","rowIndex","colIndex","ScatterPlotComponent","reader","FileReader","onload","e","result","dynamicTyping","readAsText","border","margin","width","height","ResponsiveContainer","ScatterChart","top","right","bottom","left","CartesianGrid","XAxis","dataKey","name","YAxis","Tooltip","Scatter","fill","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7d5abcc4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Papa from 'papaparse';\n\nconst SimpleCSVLoader = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [error, setError] = useState(null);\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    setError(null);\n\n    if (file) {\n      if (file.type !== 'text/csv') {\n        setError('Please upload a valid CSV file');\n        return;\n      }\n\n      Papa.parse(file, {\n        complete: (results) => {\n          if (results.data && results.data.length > 0) {\n            setHeaders(results.meta.fields || Object.keys(results.data[0]));\n            setData(results.data);\n          } else {\n            setError('No data found in the CSV file');\n          }\n        },\n        header: true,\n        skipEmptyLines: true,\n        error: (error) => {\n          setError(`Error parsing CSV: ${error.message}`);\n        }\n      });\n    }\n  };\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"mb-4\">\n        <input\n          type=\"file\"\n          accept=\".csv\"\n          onChange={handleFileUpload}\n          className=\"mb-4\"\n        />\n      </div>\n\n      {error && (\n        <div className=\"p-4 mb-4 text-red-500 bg-red-100 rounded\">\n          {error}\n        </div>\n      )}\n\n      {data.length > 0 && (\n        <div style={{ overflowX: 'auto' }}>\n          <table className=\"w-full border-collapse border\">\n            <thead>\n              <tr>\n                {headers.map((header, index) => (\n                  <th key={index} className=\"border p-2 bg-gray-100\">\n                    {header}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {data.slice(0, 5).map((row, rowIndex) => (\n                <tr key={rowIndex}>\n                  {headers.map((header, colIndex) => (\n                    <td key={`${rowIndex}-${colIndex}`} className=\"border p-2\">\n                      {row[header]}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div className=\"mt-2 text-gray-600\">\n            Showing first 5 rows of {data.length} total rows\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SimpleCSVLoader;","import React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport {\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\n\nconst ScatterPlotComponent = () => {\n  const [data, setData] = useState([]);\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        Papa.parse(e.target.result, {\n          header: true,\n          dynamicTyping: true,\n          skipEmptyLines: true,\n          complete: (results) => {\n            if (results.data && results.data.length > 0) {\n              setData(results.data);\n            }\n          }\n        });\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        accept=\".csv\"\n        onChange={handleFileUpload}\n      />\n\n      {data.length > 0 && (\n        <div style={{\n          border: '1px solid #ccc',\n          margin: '20px 0',\n          width: '100%',\n          height: '400px'  // Fixed height but responsive width\n        }}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ScatterChart\n              margin={{\n                top: 20,\n                right: 20,\n                bottom: 20,\n                left: 20,\n              }}\n            >\n              <CartesianGrid />\n              <XAxis type=\"number\" dataKey=\"x\" name=\"X\" />\n              <YAxis type=\"number\" dataKey=\"y\" name=\"Y\" />\n              <Tooltip />\n              <Scatter\n                data={data}\n                fill=\"#8884d8\"\n              />\n            </ScatterChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScatterPlotComponent;","import React from 'react';\nimport SimpleCSVLoader from './components/SimpleCSVLoader';\nimport ScatterPlotComponent from './components/ScatterPlotComponent';\n\nfunction App() {\n  return (\n    <div>\n      <h1 className=\"text-2xl font-bold m-4\">Data Visualization</h1>\n      <div className=\"grid grid-cols-1 gap-4 m-4\">\n        <div>\n          <h2 className=\"text-xl font-bold mb-2\">CSV Data Preview</h2>\n          <SimpleCSVLoader />\n        </div>\n        <div>\n          <h2 className=\"text-xl font-bold mb-2\">Scatter Plot</h2>\n          <ScatterPlotComponent />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}